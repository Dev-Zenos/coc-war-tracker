require('dotenv').config();
const {Client, IntentsBitField, EmbedBuilder, ActivityType} = require('discord.js');
const {CommandHandler} = require('djs-commander');
const path = require('path');
const mongoose = require('mongoose');
const API = require('clashofclans.js').Client;
const MemberSchema = require('./models/war_data');
const warSchema = require('./models/wars');
const { GoogleSpreadsheet } =  require('google-spreadsheet');
const {JWT} = require('google-auth-library');




// x-x-x-x-x-x-x-x--x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x






const coc_client = new API({ keys: [process.env.API_KEY] });
var serviceAccountAuth;
var doc;

const client = new Client({
    intents: [
        IntentsBitField.Flags.Guilds,
        IntentsBitField.Flags.GuildMembers,
        IntentsBitField.Flags.GuildMessages,
        IntentsBitField.Flags.MessageContent,
    ],
})




new CommandHandler({
    client: client,
    commandsPath: path.join(__dirname, "commands"),
    eventsPath: path.join(__dirname, "events"),
    validationsPath: path.join(__dirname, "validations"),
    testServer: process.env.GUILD_ID
});


(async() => {
    client.login(process.env.TOKEN);
})();

client.on('ready', async (c) => {
    await connectDB();
    await initSheet();

    await saveData();
    const interval2 = setInterval(saveData, 5 * 60 * 1000); // 30 minutes in milliseconds
})


//Intiazlies the sheets variables
async function connectDB() {
    //console.log("trying");

    try{
        mongoose.set('strictQuery', false);
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('Connected to MongoDB');
    }
    catch(error){
        console.error(`Error: ${error}`);
    }

}


async function initSheet(){
    serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    keyFile: process.env.GOOGLE_PRIVATE_KEY,
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    doc = new GoogleSpreadsheet(process.env.SPREADSHEET_ID, serviceAccountAuth);
    await doc.loadInfo(); // loads document properties and worksheets

  
}

async function saveData(){
    try{
      const clan = await coc_client.getCurrentWar(process.env.CLAN_TAG);
      console.log(clan.state);
      if(clan.state == 'inWar' || clan.state == 'warEnded'){
        await checkWar(clan);
        const members = clan.clan.members;
        for(const member of members){
          const attacks = member.attacks;
          for(const attack of attacks){
            var opTh = (await coc_client.getPlayer(attack.defenderTag)).townHallLevel;
            attack.oppoentTownHall = opTh;
          }
          let query = {
              tag: member.tag,
              opponent_clan_tag: clan.opponent.tag,
              timestamp: clan.startTime
          }
          
          let result = await MemberSchema.findOne(query);
          if(result){
              result.attacks = member.attacks;
              await result.save();
              console.log("Updated member in database: " + member.name + " for clan " + clan.opponent.tag);
          }
          else{
            let newMember = new MemberSchema({
              name: member.name,
              tag: member.tag,
              townhall: member.townHallLevel,
              opponent_clan_tag: clan.opponent.tag,
              attacks: member.attacks,
              timestamp: clan.startTime,
            });
            await newMember.save();
            console.log("Added new member to database: " + member.name);
          }
  
     }
      console.log("Data saved");
    }
  }
  catch(error){
    console.error(`Error: ${error}`);
  } 
  
}



  
async function checkWar(clan){
    const query = {
      clan_tag: clan.clan.tag,
      opponent_clan_tag: clan.opponent.tag,
      timestamp: clan.startTime,
    }
      let result = await warSchema.findOne(query);
        //console.log("Here: " + result);
      if(!result){
        let newWar = new warSchema({
          clan_tag: clan.clan.tag,
          opponent_clan_tag: clan.opponent.tag,
          timestamp: clan.startTime,
          lastUpdated: Date.now(),
          state: clan.state,
        });
        await newWar.save();
        console.log("Added new war to database");
      }
      else{
        if(result.state != clan.state){
          const channel = client.channels.cache.get(process.env.BOT_FEED);

          result.state = clan.state;
          channel.send(`The war state for ${clan.clan.name} vs ${clan.opponent.name} has changed to ${clan.state}\n <@979875479425261580> Pls Update The Sheets!`);
        }
        result.lastUpdated = Date.now();
        await result.save();
        console.log("Updated war in database");
      }  
    
}
