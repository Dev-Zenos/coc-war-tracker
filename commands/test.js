const API = require('clashofclans.js').Client;
const { SlashCommandBuilder } = require('discord.js');
const { GoogleSpreadsheet } =  require('google-spreadsheet');
const {JWT} = require('google-auth-library');
require('dotenv').config();
const coc_client = new API({ keys: [process.env.API_KEY] });



var serviceAccountAuth;
var doc;
var sheetIndex = 1;

module.exports = {
    data: new SlashCommandBuilder().setName('test').setDescription('test'),
    run: async({ interaction }) => {
        await interaction.deferReply();
        await initSheet();

        const sheet = doc.sheetsByIndex[sheetIndex];
        const rows = await sheet.getRows(); // can pass in { limit, offset }

        let scores = [];
        let names = [];

        for (const row of rows) {
            let tag = row.get('Player tag');
            //console.log(tag);
            if(tag == undefined || tag.indexOf('#') === -1){
                continue;
            }
            const player = await coc_client.getPlayer(tag);
            const achiv = await findAchivement(player.achievements, "War Hero");
            const achiv2 = await findAchivement(player.achievements, "War League Legend");
            names.push((`${player.name}: ${achiv.value} war stars and ${achiv2.value} war league stars`));
            scores.push(parseInt(achiv.value) + parseInt(achiv2.value));
        } 

        const { sortedScores, sortedNames } = sortScoresAndNames(scores, names);
        let counter = 0;
        let message = "```No. Name\n";
        let messages = [];
        for (const row of sortedNames) {
            counter++;
            message += `${counter}. ${row}\n`;
            if(message.length > 1900){
                messages.push(message+"```");
                message = "```";
            }
        }
        if(message.length > 3){
            messages.push(message+"```");
        }
        await interaction.editReply("Here are the total stars of players based on ingame achivements: ");
        for(const message of messages){
            await interaction.channel.send(message);
        }
    },Globalcooldown_60s: true,

}

function sortScoresAndNames(scores, names) {
    // Create an array of pairs (score, name)
    let pairedArray = scores.map((score, index) => [score, names[index]]);

    // Sort the paired array based on the score in descending order
    pairedArray.sort((a, b) => b[0] - a[0]);

    // Separate the paired array back into scores and names arrays
    let sortedScores = pairedArray.map(pair => pair[0]);
    let sortedNames = pairedArray.map(pair => pair[1]);

    return { sortedScores, sortedNames };
}

async function findAchivement(achievements, name) {
    for (let i = 0; i < achievements.length; i++) {
        if (achievements[i].name .toLowerCase() === name.toLowerCase()) {
            return achievements[i];
        }
    }
    return 'Not found';
}

async function initSheet(){
    serviceAccountAuth = new JWT({
        // env var values here are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
        keyFile: process.env.GOOGLE_PRIVATE_KEY,
        scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    doc = new GoogleSpreadsheet(process.env.SPREADSHEET_ID, serviceAccountAuth);
    await doc.loadInfo(); // loads document properties and worksheets
  
}